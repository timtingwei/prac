#03_dict_01.py

#///{}创建的方式用:和,dict()函数创建的方式用=和,

#myDict = {[1,2,3]:5}#///要求key是不可变的
#print (myDict)

item = [(0,[2,5,8]),(1,[12,15,19]),(2,[100,105,109])] #建立包含多个元组的列表,用于构建字典的条件
d = dict(item)
print (d)
#{0: [2, 5, 8], 1: [12, 15, 19], 2: [100, 105, 109]}
print (d[2]) #返回键为2的值
#[100, 105, 109]

myItem = [(0,1),(2,3)]
myD = dict(myItem)
print (myD)
#{0: 1, 2: 3}

myItemB = [(0,(1,)),(1,(2,))]
myDB = dict(myItemB)
print (myDB)
#{0: (1,), 1: (2,)}

#///字典操作很多跟列表类似，使用函数len(d)获得键对应的value,d[k]返回关联到k上的值， d[k]=v则将值v关联到键k上，del d[k] 删除键为k的项，k in d 检查d中是否含有键为k的项，这与v in list 检查v项值是否在列表中一样，返回值会True或者False
print (d)
#{0: [2, 5, 8], 1: [12, 15, 19], 2: [100, 105, 109]}
print (len(d)) #使用len()返回键/对的数量
#3
print (d[1]) #返回键为1的值
#[12, 15, 19]

d[3] = [22,33] #增加键3，并将值关联到3上，增加新的键/值对
print (d)
#{0: [2, 5, 8], 1: [12, 15, 19], 2: [100, 105, 109], 3: [22, 33]}

del d[0] #删除指定键的值
print (d)
#{1: [12, 15, 19], 2: [100, 105, 109], 3: [22, 33]}
print (0 in d ) #判断指定的键是否在字典中，返回True/False
#False
print (1 in d )
#True

#///字典和树形结构相当于内嵌的循环结构，往往使用内嵌循环的方式达到同样目的
