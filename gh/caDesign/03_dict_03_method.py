#03_dict_03_method.py

#///字典的方法有:
#d.clear() 原地清楚字典中的所有键/值，变成空字典{}
#d.copy() 浅复制，意思是说，当复制的字典键/值发生改变时，被复制的字典也会随之发生改变；反之不会
#d.get() 可以根据指定的键返回值，如果字典中不存在指定的键，不返回任何值
#d.items() 将所有的字典即键/值以列表方式返回
#d.keys() 仅返回键的列表
#d.values() 仅返回值的列表
#d.pop() 根据指定的键返回值，并同时移除字典中的项
#d.popitem() 类似于d.pop()，但是随即弹出项
#d.setdefault() 类似于d.get()，但是更强调在不含指定键的条件下，由值参数匹配该键，并放置于字典中
#d.update() 用一个字典更新另一字典，例如键值相同的项被替换
#{}.fromkeys([0,1,2,3,4]) #给定键，建立值为空的字典

lstA = list(range(6,20,3)) #定义列表lstA
print (lstA)
#[6, 9, 12, 15, 18]

lstB = list(range(100,150,15)) #定义列表lstB
print (lstB)
#[6, 9, 12, 15, 18]

d = {0:lstA,1:lstB} #由定义的两个列表作为值
print (d)
#{0: [6, 9, 12, 15, 18], 1: [100, 115, 130, 145]}

#///用一句话定义 虽然复杂度急剧上升
myDict = dict([(0,(list(range(6,20,3)))),(1,(list(range(100,150,15))))])
print (myDict)
#{0: [6, 9, 12, 15, 18], 1: [100, 115, 130, 145]}
md = dict([(0,123),(1,456)]) #///含多个元组的列表
print (md)

#///继续前面的d
dcopy = d #直接将字典d赋值给变量dcopy，原字典发生变动后，复制的字典也随之发生变化
print (dcopy)
#{0: [6, 9, 12, 15, 18], 1: [100, 115, 130, 145]}

#///d.clear() 原地清楚字典中的所有键/值，变成空字典{}
returnedd  = d.clear() #使用d.clear()清除字典d，并将返回值赋值给变量（实际上无返回值）
print (returnedd)
#None
print (d)
#{} 列表为空列表,不是None
print (dcopy)
#{} #///直接赋值给方法获取的复制字典，在原字典发生变动的时候，复制的字典也随之发生变化

d[5] = list(range(1,9,2)) #将值直接赋值给字典键的方式建立字典
print (d)
#{5: [1, 3, 5, 7]}

#///d.copy() 浅复制，意思是说，当复制的字典键/值发生改变时，被复制的字典也会随之发生改变；反之不会
dcopy = d.copy() #用copy()方法复制字典
print (dcopy)
#{5: [1, 3, 5, 7]}

d[8] = [5,7] #增加字典的键/值项
print (d)
#{8: [5, 7], 5: [1, 3, 5, 7]}
print (dcopy)
#{5: [1, 3, 5, 7]} #copy()复制的字典，原字典发生变动的时候，复制的字典不发生改变

dcopy[5].remove(5) #指定键对应的list的指定的值5被移除
print (dcopy)
#{5: [1, 3, 7]}
print (d) #///使用d.copy()复制的字典发生改变时，原字典发生改变
#{8: [5, 7], 5: [1, 3, 7]}

#///d.get() 可以根据指定的键返回值，如果字典中不存在指定的键，不返回任何值
print (d.get(8)) #指定键返回对应的值
#[5, 7]
print (d.get(9)) #如果指定键不存在，不返回任何值

#///d.items() 将所有的字典即键/值以列表方式返回
print (d.items()) #以列表的形式返回键/值项
#dict_items([(8, [5, 7]), (5, [1, 3, 7])])
print (dict(d.items()))
#{8: [5, 7], 5: [1, 3, 7]}

#///d.keys() 仅返回键的列表
print (d.keys()) #以列表的形式返回键
#dict_keys([8, 5])
#///d.values() 仅返回值的列表
print (d.values()) #以列表的形式返回值
#dict_values([[5, 7], [1, 3, 7]])

#///d.setdefault() 类似于d.get()，但是更强调在不含指定键的条件下，由值参数匹配该键，并放置于字典中
print (d.setdefault(6,[77,99])) #返回指定的值，如果不存在该键,则字典增加新的键/值对
#[77, 99]
print (d)
#{8: [5, 7], 5: [1, 3, 7], 6: [77, 99]}

#///d.pop() 根据指定的键返回值，并同时移除字典中的项
print (d.pop(5)) #移除指定键/值，并返回该值
#[1, 3, 7]
print (d)
#{8: [5, 7], 6: [77, 99]}

x = {8:[5,7,6,3,2],9:[3,2,33,55,66]} #直接定义一个字典
print (x)
#{8: [5, 7, 6, 3, 2], 9: [3, 2, 33, 55, 66]}

#///d.update() 用一个字典更新另一字典，例如键值相同的项被替换
d.update(x) #使用字典x更新字典d
print (d)
#{8: [5, 7, 6, 3, 2], 9: [3, 2, 33, 55, 66], 6: [77, 99]}

#///d.popitem() 类似于d.pop()，但是随即弹出项
print (d.popitem()) #随即弹出一对键/值，并在该字典中移除
print (d)

d = {}.fromkeys([0,1,2,3,4]) #给定键，建立值为空的字典
print (d)
#{0: None, 1: None, 2: None, 3: None, 4: None}
