#include <iostream>
#include <vector>

using std::cin; using std::cout; using std::endl;
using std::vector;

int precedence_associativity_412()
{
	//优先级和结合律决定了运算对象组合的方式。
	//括号无视上述规则，程序员可以使用括号将表达式的某个局部扩起来使其得到优先运算
	//优先级相同，其组合方式由结合律确定。
	//优先级：ex:乘法和除法的优先级高于加法和减法
	//结合律：ex:算术运算符满足左结合律，意味着如果运算符的优先级相同，将按照从左向右的顺序组合运算对象。

	//优先级
	int i1 = 3 + 4 * 5;      //值是23不是35
	//结合律
	int i2 = 20 - 15 - 3;    //值是2不是8
	//复杂例子
	int i3 = 6 + 3 * 4 / 2 + 2;      //完全按照左结合律 得到20
	cout << i3 << endl;
	//表达式中的括号符合默认的优先级和结合律
	int i4 = ((6 + ((3 * 4) / 2)) + 2);    //实际得到14

	//括号无视优先级和结合律
	cout << (6 + 3) * (4 / 2 + 2) << endl;  //输出36
	cout << ((6 + 3) * 4) / 2 + 2 << endl;  //输出20
	cout << 6 + 3 * 4 / (2 + 2) << endl;    //输出9

	//优先级与结合律有何影响

	//优先级会影响程序的正确性
	int ia[] = { 0,2,4,6,8 };     //含有5个整数的数组
	int last = *(ia + 4);         //ia[4]的值是8
	//cout << last << endl;
	last = *ia + 4;                //ia[0] + 4 得到4
	//cout << last << endl;
	//结合律对表达式产生影响的典型例子
	//IO相关的运算符满足左结合律
	int v1, v2;
	cin >> v1 >> v2;       //先读入v1再读入v2



	system("pause");
	return 0;

}